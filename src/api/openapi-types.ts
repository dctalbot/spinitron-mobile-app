/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/personas": {
    /** Get Personas */
    get: {
      parameters: {
        query?: {
          /** @description Filter by Persona name */
          name?: string;
          count?: components["parameters"]["limit"];
          page?: components["parameters"]["page"];
          fields?: components["parameters"]["fields"];
          expand?: components["parameters"]["expand"];
        };
      };
      responses: {
        /** @description The personas */
        200: {
          content: {
            "application/json": components["schemas"]["BaseIndexResponse"] & {
              items?: components["schemas"]["Persona"][];
            };
            "application/xml": components["schemas"]["BaseIndexResponse"] & {
              items?: components["schemas"]["Persona"][];
            };
          };
        };
      };
    };
  };
  "/personas/{id}": {
    /** Get Persona by id */
    get: {
      parameters: {
        query?: {
          fields?: components["parameters"]["fields"];
          expand?: components["parameters"]["expand"];
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description The Persona */
        200: {
          content: {
            "application/json": components["schemas"]["Persona"];
            "application/xml": components["schemas"]["Persona"];
          };
        };
        /** @description Persona not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
            "application/xml": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/shows": {
    /**
     * Returns scheduled shows optionally filtered by {start} and/or {end} datetimes
     * @description **Terminology**: Spinitron defines a *show* as a radio program. A show can have one or more *schedules*,
     * each of which may specify either an *occurence* or a *repetition*, which represents a set of occurences.
     * Thus scheduled shows have occurences that, for example, may be displayed in a calendar.
     *
     * In the response, `items` is an array of objects representing occurences of scheduled shows.
     *
     * You may optionally filter `items` to a datetime *range* by including in the request {start} and/or {end}
     * parameters, both of which must be no more than one hour in the past. An occurence starting at {end} is
     * included in the reponse.
     *
     * `itmes` can include occurences that begin *or* end within the filter range. A show that goes on air before
     * {start} appears in `items` if it ends *after* but not *at* {start}. An occurence starting at or before {end}
     * is included.
     *
     * If the request omits the {start} parameter, the server sets its value to the current time so that the filter
     * range's start is always defined. If the request specifies {end} then the requested range is *bounded*,
     * otherwise it is *unbounded*.
     *
     * For a bounded request, `items` includes *every* occurence of all shows occuring in the range. The only
     * difference between objects in `items` representing a given show will be the `start` field value.
     *
     * For an unbounded request, `items` includes *only one* occurence per show, specifically, the
     * next occurrence after {start} of all shows occuring after {start}.
     *
     * Use an unbounded request to get a straight list all shows. Use a bounded request to get a calendar/agenda
     * of shows expanded into occurrences by thir shedules and repetitions.
     *
     * Objects in `items` are ordered first by `datetime` and then by `id`.
     */
    get: {
      parameters: {
        query?: {
          /** @description The datetime starting from items must be returned. Maximum 1 hour in past. */
          start?: string;
          /** @description The ending datetime. Maximum 1 hour in past. */
          end?: string;
          count?: components["parameters"]["limit"];
          page?: components["parameters"]["page"];
          fields?: components["parameters"]["fields"];
          expand?: components["parameters"]["expand"];
        };
      };
      responses: {
        /** @description The shows */
        200: {
          content: {
            "application/json": components["schemas"]["BaseIndexResponse"] & {
              items?: components["schemas"]["Show"][];
            };
            "application/xml": components["schemas"]["BaseIndexResponse"] & {
              items?: components["schemas"]["Show"][];
            };
          };
        };
        /** @description Invalid datetimes in filter: either too old or {end} is less than {start}. */
        422: {
          content: {
            "application/json": components["schemas"]["Error"];
            "application/xml": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/shows/{id}": {
    /**
     * Get a Show by id
     * @description The response object represents the next occurence of the show specified by {id}.
     *
     * Status 404 is returned if a show with {id} does not exist or if it does but all its scheduled occurences elapsed in the past.
     */
    get: {
      parameters: {
        query?: {
          fields?: components["parameters"]["fields"];
          expand?: components["parameters"]["expand"];
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description The Show */
        200: {
          content: {
            "application/json": components["schemas"]["Show"];
            "application/xml": components["schemas"]["Show"];
          };
        };
        /** @description Show not found or too old */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
            "application/xml": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/playlists": {
    /**
     * Returns playlists optionally filtered by {start} and/or {end} datetimes
     * @description Get Playlists optionally filtered by a datetime range.
     * Only past Playlists will be returned (with allowed tolerance equals 1 hour in future).
     *
     * Ordered chronologically from newest to oldest.
     */
    get: {
      parameters: {
        query?: {
          /** @description The datetime starting from items must be returned. Maximum 1 hour in future. */
          start?: string;
          /** @description The ending datetime. Maximum 1 hour in future. */
          end?: string;
          /** @description Filter by show */
          show_id?: number;
          /** @description Filter by persona */
          persona_id?: number;
          count?: components["parameters"]["limit"];
          page?: components["parameters"]["page"];
          fields?: components["parameters"]["fields"];
          expand?: components["parameters"]["expand"];
        };
      };
      responses: {
        /** @description The playlists */
        200: {
          content: {
            "application/json": components["schemas"]["BaseIndexResponse"] & {
              items?: components["schemas"]["Playlist"][];
            };
            "application/xml": components["schemas"]["BaseIndexResponse"] & {
              items?: components["schemas"]["Playlist"][];
            };
          };
        };
      };
    };
  };
  "/playlists/{id}": {
    /**
     * Get a Playlist by id
     * @description The response object represents the playlist specified by {id}.
     *
     * Status 404 is returned if a playlist with {id} does not exist or if it does but starts in the future (with allowed tolerance equals 1 hour in future).
     */
    get: {
      parameters: {
        query?: {
          fields?: components["parameters"]["fields"];
          expand?: components["parameters"]["expand"];
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description The playlist */
        200: {
          content: {
            "application/json": components["schemas"]["Playlist"];
            "application/xml": components["schemas"]["Playlist"];
          };
        };
        /** @description Playlist not found or is in the future */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
            "application/xml": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/spins": {
    /**
     * Returns spins optionally filtered by {start} and/or {end} datetimes
     * @description Get Spins optionally filtered by a datetime range. Only past Spins will be returned.
     */
    get: {
      parameters: {
        query?: {
          /** @description The datetime starting from items must be returned. */
          start?: string;
          /** @description The ending datetime. */
          end?: string;
          /** @description Filter by playlist */
          playlist_id?: number;
          /** @description Filter by show */
          show_id?: number;
          count?: components["parameters"]["limit"];
          page?: components["parameters"]["page"];
          fields?: components["parameters"]["fields"];
          expand?: components["parameters"]["expand"];
        };
      };
      responses: {
        /** @description The spins */
        200: {
          content: {
            "application/json": components["schemas"]["BaseIndexResponse"] & {
              items?: components["schemas"]["Spin"][];
            };
            "application/xml": components["schemas"]["BaseIndexResponse"] & {
              items?: components["schemas"]["Spin"][];
            };
          };
        };
      };
    };
    /**
     * Log a Spin
     * @description An endpoint for automation systems to log spins into the spin table.
     */
    post: {
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": {
            /**
             * @description Only when automation params are configured with the "Pass through" mode.
             * Enables "live assist" mode. Default mode is "full automation".
             */
            live?: boolean;
            /** Format: date-time */
            start?: string;
            duration?: number;
            artist: string;
            release?: string;
            label?: string;
            genre?: string;
            song: string;
            composer?: string;
            isrc?: string;
          };
        };
      };
      responses: {
        /** @description The new created Spin. */
        201: {
          content: {
            "application/json": components["schemas"]["Spin"];
            "application/xml": components["schemas"]["Spin"];
          };
        };
        /** @description Validation failed. */
        422: {
          content: {
            "application/json": components["schemas"]["ValidationError"][];
            "application/xml": components["schemas"]["ValidationError"][];
          };
        };
        /** @description Failed to create the object for unknown reason. */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
            "application/xml": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/spins/{id}": {
    /** Get a Spin by id */
    get: {
      parameters: {
        query?: {
          fields?: components["parameters"]["fields"];
          expand?: components["parameters"]["expand"];
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description The spin */
        200: {
          content: {
            "application/json": components["schemas"]["Spin"];
            "application/xml": components["schemas"]["Spin"];
          };
        };
        /** @description Spin not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
            "application/xml": components["schemas"]["Error"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description The `Persona` object describes a radio DJ/host. One person can have multiple personas */
    Persona: {
      /** @example 2832 */
      id?: number;
      /**
       * @description On-air DJ/host name
       * @example Deftly-D
       */
      name?: string;
      /**
       * @description HTML-formatted biography
       * @example <p>Besides DJ'ing industrial and experimental music since 1991, Deftly has performed in industrial ...
       */
      bio?: string;
      /**
       * Format: year
       * @description Since what year has the DJ/host been at the station?
       * @example 1991
       */
      since?: number;
      /**
       * Format: email
       * @description DJ/host's email address
       * @example example@spinitron.com
       */
      email?: string;
      /**
       * Format: url
       * @description URL to web site for the DJ/host
       * @example https://spinitron.com/example/doesnt/exist
       */
      website?: string;
      /**
       * Format: url
       * @example https://spinitron.com/images/Persona/28/2832-img_profile-original.jpg
       */
      image?: string;
      _links?: {
        self?: components["schemas"]["Link"];
        shows?: components["schemas"]["Link"][];
      };
    };
    /** @description A `Show` object describes one occurrence of a radio program. A result set may contain multiple occurrences of the same show with difference `start` and `end` values. */
    Show: {
      /** @example 4498 */
      id?: number;
      /**
       * Format: date-time
       * @description UTC datetime ISO-8601
       * @example 2018-04-02T23:00:00+0000
       */
      start?: string;
      /**
       * Format: date-time
       * @description UTC datetime ISO-8601
       * @example 2018-04-03T02:00:00+0000
       */
      end?: string;
      /**
       * @description Duration in seconds
       * @example 10800
       */
      duration?: number;
      /**
       * @description Station's time zone
       * @example America/Chicago
       */
      timezone?: string;
      /**
       * @description Is the show a one-off in the schedule instead of repeating?
       * @example false
       */
      one_off?: boolean;
      /**
       * @description Program/show category
       * @example Music
       */
      category?: string;
      /**
       * @description Program/show title
       * @example Voidstar Productions’ High Voltage Circumcision Show
       */
      title?: string;
      /**
       * @description HTML-formatted description of the playlist or program/show
       * @example <p>Since 2001, <strong>The High Voltage Circumcision</strong> show has delivered a full spectrum barrage of dark hard and experimental music from industrial to noise to idm to ebm to bizarre to audio collage often with a side of live guests, social consciousness, interviews, twisted humor, studio experiments and left turns.</p>
       */
      description?: string;
      /**
       * Format: year
       * @description Since what year has the program/show existed?
       * @example 2001
       */
      since?: number;
      /**
       * Format: url
       * @description URL to web site for the program/show
       * @example https://spinitron.com/example/doesnt/exist
       */
      url?: string;
      /**
       * @description Should the client application hide information about the show's DJs/hosts?
       * @example false
       */
      hide_dj?: boolean;
      /**
       * Format: url
       * @example https://spinitron.com/images/Show/44/4498/img_show-original.jpg
       */
      image?: string;
      _links?: {
        self?: components["schemas"]["Link"];
        personas?: components["schemas"]["Link"][];
        playlists?: components["schemas"]["Link"];
      };
    };
    Playlist: {
      /** @example 219992 */
      id?: number;
      /** @example 2832 */
      persona_id?: number;
      /** @example 4498 */
      show_id?: number;
      /**
       * Format: date-time
       * @description UTC datetime ISO-8601
       * @example 2018-03-30T13:00:00+0000
       */
      start?: string;
      /**
       * Format: date-time
       * @description UTC datetime ISO-8601
       * @example 2018-03-30T14:00:00+0000
       */
      end?: string;
      /**
       * @description Duration in seconds
       * @example 3600
       */
      duration?: number;
      /**
       * @description Station's time zone
       * @example America/Chicago
       */
      timezone?: string;
      /**
       * @description Program/show category
       * @example Music
       */
      category?: string;
      /**
       * @description Program/show title
       * @example Transworld Airwaves
       */
      title?: string;
      /**
       * @description HTML-formatted description of the playlist or program/show
       * @example It is a <em>cross-­cultural musical journey united in voices and rhythms</em>.
       */
      description?: string;
      /**
       * Format: year
       * @description Since what year has the program/show existed?
       * @example 1999
       */
      since?: number;
      /**
       * Format: url
       * @description URL to web site for the playlist or program/show
       */
      url?: string;
      /**
       * @description Should the client application hide information about the playlist's DJ/host?
       * @example false
       */
      hide_dj?: boolean;
      /**
       * Format: url
       * @example https://spinitron.com/images/Show/44/4498/img_show-original.jpg
       */
      image?: string;
      /**
       * @description Was the playlist created playlists created by a radio station automation system?
       * @example false
       */
      automation?: boolean;
      /** @description Title of this episode of the program/show */
      episode_name?: string;
      /**
       * @description HTML-formatted description of the episode
       * @example <p>Episode description</p>
       */
      episode_description?: string;
      _links?: {
        self?: components["schemas"]["Link"];
        persona?: components["schemas"]["Link"];
        show?: components["schemas"]["Link"];
        spins?: components["schemas"]["Link"];
      };
    };
    Spin: {
      /** @example 8017277 */
      id?: number;
      /** @example 336722 */
      playlist_id?: number;
      /**
       * Format: date-time
       * @description UTC datetime ISO-8601
       * @example 2018-03-30T13:07:08+0000
       */
      start?: string;
      /**
       * Format: date-time
       * @description UTC datetime ISO-8601
       * @example 2018-03-30T13:10:25+0000
       */
      end?: string;
      /**
       * @description Duration in seconds
       * @example 199
       */
      duration?: number;
      /**
       * @description Station's time zone
       * @example America/Chicago
       */
      timezone?: string;
      /**
       * Format: url
       * @description Cover art
       * @example https://is5-ssl.mzstatic.com/image/thumb/Music3/v4/ef/e8/67/efe8674e-467a-adfe-9f67-8d50860b4f1e/dj.sokyjuyt.jpg/170x170bb.jpg
       */
      image?: string;
      /**
       * @description Is the track's metadata schema "classical" rather than "popular"?
       * @example false
       */
      classical?: boolean;
      /** @example The Beatles */
      artist?: string;
      /** @description Station-specific custom field relating to the song's artist */
      "artist-custom"?: string;
      /** @example Lennon - McCartney */
      composer?: string;
      /** @example All Together Now / Hey Bulldog */
      release?: string;
      /** @description Station-specific custom field relating to the release */
      "release-custom"?: string;
      /**
       * @description Is it a "Various Artists" release?
       * @example false
       */
      va?: boolean;
      /**
       * @description Record label, i.e. publisher of the sound recording
       * @example Apple Records
       */
      label?: string;
      /** @description Station-specific custom field relating to the record label */
      "label-custom"?: string;
      /**
       * @description Year of initial release
       * @example 1972
       */
      released?: number;
      /**
       * @description Media format in which the sound recording was reased
       * @example 7"
       */
      medium?: string;
      /** @example Pop */
      genre?: string;
      /**
       * @description Title of the song or track
       * @example Hey Bulldog
       */
      song?: string;
      /**
       * @description HTML-formatted DJ annotation of the spin, can include images etc.
       * @example B-side of the <strong>original</strong> 7" vinyl in the station's collection.
       */
      note?: string;
      /**
       * @description Was the spin requested by a listener?
       * @example false
       */
      request?: boolean;
      /**
       * @description Is the artist local to the station?
       * @example false
       */
      local?: boolean;
      /**
       * @description Is this a recent release?
       * @example false
       */
      new?: boolean;
      /**
       * @description For classical music, the main compositional work the track (see `song` field) belongs to
       * @example The Marriage of Figaro
       */
      work?: string;
      /**
       * @description For classical music, conducor of the ensemble
       * @example Herbert von Karajan
       */
      conductor?: string;
      /**
       * @description For classical music, featured performing artists, e.g. soloists
       * @example Rohan DeSaram (cello), Marianne Schroeder (piano)
       */
      performers?: string;
      /**
       * @description For classical music, orchestra, performing ensemble, choir, etc.
       * @example Vienna Philharmonic Orchestra
       */
      ensemble?: string;
      /**
       * @description Reference number in the record label's catalog
       * @example 5C 006-04982
       */
      "catalog-number"?: string;
      /** @example GBAYE9901218 */
      isrc?: string;
      /**
       * @description Universal Product Code of the release
       * @example 4006408126775
       */
      upc?: string;
      /** @example T-010.434.166-3 */
      iswc?: string;
      _links?: {
        self?: components["schemas"]["Link"];
        playlist?: components["schemas"]["Link"];
      };
    };
    ValidationError: {
      field?: string;
      message?: string;
    };
    Error: {
      name?: string;
      message?: string;
      code?: number;
      status?: number;
      type?: string;
    };
    Pagination: {
      totalCount?: number;
      pageCount?: number;
      currentPage?: number;
      perPage?: number;
    };
    Link: {
      href?: string;
    };
    BaseIndexResponse: {
      _links?: {
        self?: components["schemas"]["Link"];
      };
      _meta?: components["schemas"]["Pagination"];
    };
  };
  responses: never;
  parameters: {
    /** @description Amount of items to return */
    limit?: number;
    /** @description Offset, used together with count */
    page?: number;
    /** @description Allows to select only needed fields */
    fields?: string[];
    /** @description Allows to select extra fields */
    expand?: string[];
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
